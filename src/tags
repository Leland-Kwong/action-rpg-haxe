!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL	Game.hx	/^    var ALL = Entity.ALL;$/;"	v
ALL	Game.hx	/^  public static var ALL: Array<Entity> = [];$/;"	v
ALL_BY_ID	Game.hx	/^  public static var ALL_BY_ID: Map<String, Entity> = new Map();$/;"	v
Asset	Asset.hx	/^class Asset {$/;"	c
BRESENHAM_DONE	Utils.hx	/^  public static var BRESENHAM_DONE = 1;$/;"	v
Bullet	Game.hx	/^class Bullet extends Projectile {$/;"	c
Camera	Camera.hx	/^class Camera {$/;"	c
CameraRef	Camera.hx	/^typedef CameraRef = {$/;"	t
Colors	Game.hx	/^class Colors {$/;"	c
Config	Config.hx	/^class Config {$/;"	c
Cooldown	Game.hx	/^class Cooldown {$/;"	c
Easing	Easing.hx	/^class Easing {$/;"	c
EasingExample	Easing.hx	/^class EasingExample {$/;"	c
Enemy	Game.hx	/^class Enemy extends Entity {$/;"	c
EnemySpawner	Game.hx	/^class EnemySpawner {$/;"	c
Entity	Game.hx	/^class Entity extends h2d.Object {$/;"	c
EntityId	Game.hx	/^typedef EntityId = String;$/;"	t
Fonts	Fonts.hx	/^class Fonts {$/;"	c
Game	Game.hx	/^class Game extends h2d.Object {$/;"	c
Grid	Grid.hx	/^class Grid {$/;"	c
GridEditMode	Grid.hx	/^enum GridEditMode {$/;"	e
GridEditor	Grid.hx	/^class GridEditor {$/;"	c
GridItems	Grid.hx	/^typedef GridItems = Map<GridKey, GridKey>;$/;"	t
GridKey	Grid.hx	/^typedef GridKey = String;$/;"	t
GridRef	Grid.hx	/^typedef GridRef = {$/;"	t
Key	Game.hx	/^    var Key = hxd.Key;$/;"	v
MAX_NUM_ITERATIONS	Utils.hx	/^    var MAX_NUM_ITERATIONS = 5000;$/;"	v
PI	Easing.hx	/^  static var PI = Math.PI;$/;"	v
PartSystem	ParticlePlayground.hx	/^typedef PartSystem = { var particles: Array<Particle>; 																		$/;"	t
Particle	ParticlePlayground.hx	/^typedef Particle = { var dx: Float;$/;"	t
ParticlePlayground	ParticlePlayground.hx	/^class ParticlePlayground {$/;"	c
ParticleSystem	ParticlePlayground.hx	/^class ParticleSystem {$/;"	c
Player	Game.hx	/^class Player extends Entity {$/;"	c
Point	Game.hx	/^typedef Point = {$/;"	t
Projectile	Game.hx	/^class Projectile extends Entity {$/;"	c
SaveState	SaveState.hx	/^class SaveState {$/;"	c
SoundFx	Game.hx	/^class SoundFx {$/;"	c
TARGET_RADIUS	Game.hx	/^  var TARGET_RADIUS = 20.0;$/;"	v
TestUtils	TestUtils.hx	/^class TestUtils {$/;"	c
Utils	Utils.hx	/^class Utils {$/;"	c
_dx	Game.hx	/^    var _dx = Math.cos(aToTarget);$/;"	v
_dy	Game.hx	/^    var _dy = Math.sin(aToTarget);$/;"	v
a	Game.hx	/^              var a = Math.atan2(ept.y - pt.y, ept.x - pt.x);$/;"	v
a	Game.hx	/^      var a = ALL[i];$/;"	v
a	Game.hx	/^      var a = Entity.ALL_BY_ID[id];$/;"	v
aToTarget	Game.hx	/^        var aToTarget = Math.atan2(follow.y - y, follow.x - x);$/;"	v
aToTarget	Game.hx	/^    var aToTarget = Math.atan2(y2 - y1, x2 - x1);$/;"	v
aWithNeighbors	Game.hx	/^        var aWithNeighbors:Dynamic = a;$/;"	v
accumulator	Game.hx	/^  var accumulator = 0.1;$/;"	v
addItem	Grid.hx	/^  static function addItem(ref: GridRef, x, y, key: GridKey) {$/;"	f
adjustedConflict	Game.hx	/^              var adjustedConflict = Math.min(conflict, conflict * 60 \/ speed);$/;"	v
aliveTime	ParticlePlayground.hx	/^          var aliveTime = time - p.createdAt;$/;"	v
aliveTime	ParticlePlayground.hx	/^        var aliveTime = time - p.createdAt;$/;"	v
angle	Game.hx	/^								var angle = Math.atan2(y1 - y, x1 - x);$/;"	v
angle	ParticlePlayground.hx	/^						var angle = Math.atan2(y2 - y1,$/;"	v
angle	ParticlePlayground.hx	/^            var angle = startAngle + Utils.rnd(-angleDiff, angleDiff, true);$/;"	v
angle	ParticlePlayground.hx	/^          var angle = Math.atan2(p.dy, p.dx)$/;"	v
angleDiff	ParticlePlayground.hx	/^          var angleDiff = Math.PI \/ 4;$/;"	v
assert	TestUtils.hx	/^  public static function assert($/;"	f
attackCooldown	Game.hx	/^        var attackCooldown = 0.0;$/;"	v
attackDistance	Game.hx	/^              var attackDistance = d - pt.radius + ept.radius;$/;"	v
attackRange	Game.hx	/^      var attackRange = 80;$/;"	v
attackTarget	Game.hx	/^  public var attackTarget: Entity;$/;"	v
avoidOthers	Game.hx	/^  public var avoidOthers = false;$/;"	v
avoidX	Game.hx	/^              var avoidX = Math.cos(a) * adjustedConflict * w * multiplier;$/;"	v
avoidY	Game.hx	/^              var avoidY = Math.sin(a) * adjustedConflict * w * multiplier;$/;"	v
b	Game.hx	/^        var b = new Bullet(x + Math.cos(angle) * 30,$/;"	v
batch	ParticlePlayground.hx	/^																							var batch: h2d.SpriteBatch;$/;"	v
batchElement	ParticlePlayground.hx	/^																					var batchElement: BatchElement; };$/;"	v
batchElement	ParticlePlayground.hx	/^						var batchElement = new BatchElement(circleTile);$/;"	v
batchElement	ParticlePlayground.hx	/^            var batchElement = new BatchElement(tile);$/;"	v
batchElement	ParticlePlayground.hx	/^          var batchElement = new BatchElement(circleTile);$/;"	v
bounceAnimationStartTime	Game.hx	/^  var bounceAnimationStartTime = -1.0;$/;"	v
bresenhamLine	Utils.hx	/^  public static function bresenhamLine($/;"	f
bulletBasic	Game.hx	/^  public static function bulletBasic(cooldown = 0.1) {$/;"	f
c	Game.hx	/^        var c = isClearPath$/;"	v
c	Game.hx	/^      var c:Dynamic = child;$/;"	v
c5	Easing.hx	/^    var c5 = (2 * Math.PI) \/ 4.5;$/;"	v
cache	Grid.hx	/^    var cache = ref.itemCache[key];$/;"	v
calcNumEnemies	Game.hx	/^  function calcNumEnemies(level: Int) {$/;"	f
canSeeTarget	Game.hx	/^  public var canSeeTarget = true;$/;"	v
canvas	Grid.hx	/^  var canvas: h2d.Graphics;$/;"	v
cds	Game.hx	/^  var cds = new Cooldown();$/;"	v
cds	Game.hx	/^  var cds: Cooldown;$/;"	v
cds	Game.hx	/^  var cds: Map<String, Float>;$/;"	v
cds	Grid.hx	/^  var cds = new Game.Cooldown();$/;"	v
cds	ParticlePlayground.hx	/^  var cds = new Cooldown();$/;"	v
cellData	Grid.hx	/^        var cellData = getCell(ref, x, y);$/;"	v
cellData	Grid.hx	/^    var cellData = getCell(ref, x, y);$/;"	v
cellFont	Grid.hx	/^    var cellFont = Fonts.primary.get().clone();$/;"	v
cellSize	Game.hx	/^        var cellSize = mapRef.cellSize;$/;"	v
cellSize	Game.hx	/^    var cellSize = mapRef.cellSize;$/;"	v
cellSize	Grid.hx	/^      var cellSize = 10;$/;"	v
cellSize	Grid.hx	/^      var cellSize = 1;$/;"	v
cellSize	Grid.hx	/^  var cellSize = 64;$/;"	v
cellSize	Grid.hx	/^  var cellSize: Int;$/;"	v
cellTile	Grid.hx	/^  var cellTile: h2d.Tile;$/;"	v
circleTile	ParticlePlayground.hx	/^  var circleTile: h2d.Tile;$/;"	v
clamp	Utils.hx	/^  public static function clamp(value: Float, min: Float, max: Float) {$/;"	f
cleanupDisposedEntities	Game.hx	/^  function cleanupDisposedEntities() {$/;"	f
cleanupLevel	Game.hx	/^  public function cleanupLevel() {$/;"	f
collidedWith	Game.hx	/^  var collidedWith: Entity;$/;"	v
color	Game.hx	/^        var color = Game.Colors.pureWhite;$/;"	v
color	Game.hx	/^  public var color: Int;$/;"	v
color	Game.hx	/^  var color: Int;$/;"	v
colors	Game.hx	/^  static var colors = [$/;"	v
conflict	Game.hx	/^              var conflict = min - d;$/;"	v
conflict	Game.hx	/^        var conflict = d < min;$/;"	v
count	ParticlePlayground.hx	/^          var count = 3;$/;"	v
create	Camera.hx	/^  public static function create(): CameraRef {$/;"	f
create	Grid.hx	/^  public static function create($/;"	f
createEnvironmentItems	Game.hx	/^        var createEnvironmentItems = (x, y, items: Grid.GridItems) -> {$/;"	v
createdAt	ParticlePlayground.hx	/^																					var createdAt: Float;$/;"	v
curCell	Grid.hx	/^    var curCell = ref.data[y][x];$/;"	v
curRow	Grid.hx	/^    var curRow = ref.data[y];$/;"	v
currentItems	Grid.hx	/^          var currentItems = Grid.getItemsInRect($/;"	v
cursorSize	Grid.hx	/^  var cursorSize: Int;$/;"	v
d	Game.hx	/^            var d = Utils.distance(pt.x, pt.y, ept.x, ept.y);$/;"	v
d	Game.hx	/^        var d = Utils.distance(x, y, a.x, a.y);$/;"	v
d	Game.hx	/^        var d = Utils.distance(x, y, e.x, e.y);$/;"	v
d1	Easing.hx	/^    var d1 = 2.75;$/;"	v
dFromTarget	Game.hx	/^      var dFromTarget = Utils.distance(x, y, follow.x, follow.y);$/;"	v
damage	Game.hx	/^  var damage = 0;$/;"	v
damage	Game.hx	/^  var damage = 1;$/;"	v
damageTaken	Game.hx	/^  public var damageTaken = 0;$/;"	v
data	Grid.hx	/^  var data: Map<$/;"	v
data	SaveState.hx	/^        var data = [$/;"	v
debugCenter	Game.hx	/^  var debugCenter = false;$/;"	v
debugLineOfSight	Game.hx	/^    var debugLineOfSight = false;$/;"	v
debugPoint	Grid.hx	/^  var debugPoint: h2d.Graphics;$/;"	v
delete	SaveState.hx	/^  public static function delete(keyPath: String) {$/;"	f
dispose	ParticlePlayground.hx	/^		static public function dispose(s: PartSystem) {$/;"	f
dispose	ParticlePlayground.hx	/^  public function dispose() {$/;"	f
distance	Utils.hx	/^  public static function distance(ax:Float,ay:Float, bx:Float,by:Float) : Float {$/;"	f
distanceSqr	Utils.hx	/^  public static function distanceSqr(ax:Float,ay:Float,bx:Float,by:Float) : Float {$/;"	f
dragState	Grid.hx	/^      var dragState = {$/;"	v
drawGridInfo	Grid.hx	/^    function drawGridInfo(ref: Grid.GridRef) {$/;"	f
ds	Game.hx	/^        var ds = Easing.easeInOut(progress);$/;"	v
duration	Easing.hx	/^  var duration = 0.5;$/;"	v
dx	Game.hx	/^  public var dx = 0.0;$/;"	v
dx	Grid.hx	/^              var dx = e.relX - dragState.startMousePoint.x;$/;"	v
dx	ParticlePlayground.hx	/^            var dx = Math.cos(angle);$/;"	v
dx	Utils.hx	/^    var dx = Math.abs(x2 - x1);$/;"	v
dxNormalized	Game.hx	/^    var dxNormalized = magnitude == 0 ? _dx : _dx \/ magnitude;$/;"	v
dxNormalized	Game.hx	/^    var dxNormalized = magnitude == 0 ? dx : (dx \/ magnitude);$/;"	v
dy	Game.hx	/^  public var dy = 0.0;$/;"	v
dy	Grid.hx	/^              var dy = e.relY - dragState.startMousePoint.y;$/;"	v
dy	ParticlePlayground.hx	/^																					var dy: Float;$/;"	v
dy	ParticlePlayground.hx	/^            var dy = Math.sin(angle);$/;"	v
dy	Utils.hx	/^    var dy = Math.abs(y2 - y1);$/;"	v
dyNormalized	Game.hx	/^    var dyNormalized = magnitude == 0 ? _dy : _dy \/ magnitude;$/;"	v
dyNormalized	Game.hx	/^    var dyNormalized = magnitude == 0 ? dy : (dy \/ magnitude);$/;"	v
dynamicNeighbors	Game.hx	/^        var dynamicNeighbors = Grid.getItemsInRect($/;"	v
dynamicWorldRef	Game.hx	/^  var dynamicWorldRef: GridRef = Grid.create(64);$/;"	v
e	Game.hx	/^    var e = new Enemy({$/;"	v
e2	Utils.hx	/^      var e2 = 2 * err;$/;"	v
eachCell	Grid.hx	/^  public static function eachCell(ref: GridRef, callback) {$/;"	f
easeHeartBeat	Easing.hx	/^  public static function easeHeartBeat(x: Float) {$/;"	f
easeIn	Easing.hx	/^  public static function easeIn(x: Float): Float {$/;"	f
easeInOut	Easing.hx	/^  public static function easeInOut(x: Float): Float {$/;"	f
easeInOutBounce	Easing.hx	/^  public static function easeInOutBounce(x: Float) {$/;"	f
easeInOutElastic	Easing.hx	/^  public static function easeInOutElastic(x: Float): Float {$/;"	f
easeInQuint	Easing.hx	/^  public static function easeInQuint(x: Float): Float {$/;"	f
easeOutBounce	Easing.hx	/^  public static function easeOutBounce(x: Float) {$/;"	f
easeOutQuint	Easing.hx	/^  public static function easeOutQuint(x: Float): Float {$/;"	f
editEnvironment	Grid.hx	/^      function editEnvironment(ev, editMode) {$/;"	f
editMode	Grid.hx	/^  var editMode = GridEditMode.Normal;$/;"	v
emissionRate	ParticlePlayground.hx	/^      var emissionRate =  1 \/ projectileSpeed * 30;$/;"	v
emit	ParticlePlayground.hx	/^  static public function emit(s: PartSystem, config: Particle, before = false) {$/;"	f
emitSprite	ParticlePlayground.hx	/^		public function emitSprite(x1: Float,$/;"	f
endPos	Grid.hx	/^              var endPos = dragState.endObjectPosition;$/;"	v
enemiesLeftToSpawn	Game.hx	/^  var enemiesLeftToSpawn: Int;$/;"	v
enemy	Game.hx	/^        var enemy:Dynamic = a;$/;"	v
enemySpawner	Game.hx	/^  var enemySpawner: EnemySpawner;$/;"	v
environmentGridRef	Grid.hx	/^  var environmentGridRef: GridRef;$/;"	v
environmentGridSavePath	Grid.hx	/^  var environmentGridSavePath = 'test.map';$/;"	v
ept	Game.hx	/^            var ept = o;$/;"	v
err	Utils.hx	/^    var err = dx - dy;$/;"	v
f	Camera.hx	/^    var f = ref.following;$/;"	v
fetch	SaveState.hx	/^        var fetch = js.Browser.window.fetch;$/;"	v
fetch	SaveState.hx	/^      var fetch = js.Browser.window.fetch;$/;"	v
findNearest	Game.hx	/^  public function findNearest(x, y, range, filter: String) {$/;"	f
follow	Camera.hx	/^  public static function follow(ref: CameraRef, object: Dynamic) {$/;"	f
follow	Game.hx	/^  public var follow: Entity;$/;"	v
following	Camera.hx	/^  var following: Dynamic;$/;"	v
font	Game.hx	/^    var font: h2d.Font = hxd.res.DefaultFont.get().clone();$/;"	v
font	Game.hx	/^  var font: h2d.Font = Fonts.primary.get().clone();$/;"	v
forceMultiplier	Game.hx	/^  public var forceMultiplier = 1.0;$/;"	v
fromCache	Grid.hx	/^    var fromCache = ref.itemCache[key];$/;"	v
fullPath	SaveState.hx	/^      var fullPath = '${saveDir}\/${keyPath}';$/;"	v
g	Easing.hx	/^  var g: h2d.Graphics;$/;"	v
g	ParticlePlayground.hx	/^						var g = new BatchElement(tileWithGlow);$/;"	v
getCell	Grid.hx	/^  inline public static function getCell(ref: GridRef, x, y) {$/;"	f
getItemsInRect	Grid.hx	/^  public static function getItemsInRect(ref: GridRef, x: Float, y: Float, w, h) {$/;"	f
globalCds	Game.hx	/^  public static var globalCds = new Cooldown();$/;"	v
graphic	Game.hx	/^  var graphic: h2d.Graphics;$/;"	v
gridX	Grid.hx	/^        var gridX = Grid.snapPosition(ev.relX, cursorSize);$/;"	v
gridX	Grid.hx	/^      var gridX = Grid.snapPosition(scene.mouseX, cursorSize);$/;"	v
gridY	Grid.hx	/^        var gridY = Grid.snapPosition(ev.relY, cursorSize);$/;"	v
gridY	Grid.hx	/^      var gridY = Grid.snapPosition(scene.mouseY, cursorSize);$/;"	v
h	Camera.hx	/^  var h: Int;$/;"	v
handleEvents	Grid.hx	/^  var handleEvents: (e: hxd.Event) -> Void;$/;"	v
has	Game.hx	/^  public function has(key) {$/;"	f
has	Grid.hx	/^  public static function has(ref: GridRef, key: GridKey) {$/;"	f
hasPendingSave	Grid.hx	/^  var hasPendingSave = false;$/;"	v
hasSnakeMotion	Game.hx	/^  var hasSnakeMotion: Bool;$/;"	v
health	Game.hx	/^  public var health = 1;$/;"	v
healthBySize	Game.hx	/^  static var healthBySize = [$/;"	v
height	Grid.hx	/^      var height = 2;$/;"	v
height	Grid.hx	/^      var height = 3;$/;"	v
height	Grid.hx	/^      var height = cellSize - 1;$/;"	v
hitFlashOverlay	Game.hx	/^  var hitFlashOverlay: h2d.Graphics;$/;"	v
hrt	Utils.hx	/^  public static function hrt(): Float {$/;"	f
i	Game.hx	/^    var i = 0;$/;"	v
i	ParticlePlayground.hx	/^      var i = 0;$/;"	v
i	ParticlePlayground.hx	/^    var i = 0;$/;"	v
id	Game.hx	/^  public var id: EntityId;$/;"	v
id	Grid.hx	/^      var id = Utils.uid();$/;"	v
id	Utils.hx	/^    var id = '${idSeed}-${idsCreated}';$/;"	v
idGenerated	Game.hx	/^  static var idGenerated = 0;$/;"	v
idSeed	Utils.hx	/^  static var idSeed = '${Math.random()}'.substring(2, 8);$/;"	v
idsCreated	Utils.hx	/^  static var idsCreated = 0;$/;"	v
index	Grid.hx	/^      var index = 0;$/;"	v
init	ParticlePlayground.hx	/^  static public function init() {$/;"	f
irnd	Utils.hx	/^  public static function irnd(min:Int, max:Int, ?sign:Bool) {$/;"	f
isClearPath	Game.hx	/^      var isClearPath = Grid.isEmptyCell(mapRef, x, y);$/;"	v
isColliding	Game.hx	/^            var isColliding = d < min;$/;"	v
isDisposed	Game.hx	/^      var isDisposed = a.health <= 0;$/;"	v
isEmptyCell	Grid.hx	/^  public static function isEmptyCell(ref: GridRef, x, y) {$/;"	f
isEqualState	SaveState.hx	/^            var isEqualState = [for (k in s.keys()) k]$/;"	v
isFullySpawned	Game.hx	/^    var isFullySpawned = spawnProgress >= 1;$/;"	v
isGameOver	Game.hx	/^  public function isGameOver() {$/;"	f
isInSightRange	Game.hx	/^      var isInSightRange = i * cellSize <= entity.sightRange;$/;"	v
isLevelComplete	Game.hx	/^  public function isLevelComplete() {$/;"	f
isReady	Game.hx	/^    var isReady = mapRef != null;$/;"	v
isReady	Grid.hx	/^  var isReady = false;$/;"	v
is_end_of_line	Utils.hx	/^      var is_end_of_line = ((x1 == x2) && (y1 == y2));$/;"	v
item	Game.hx	/^    var item = null;$/;"	v
itemCache	Grid.hx	/^  var itemCache: Map<GridKey, Array<Int>>;$/;"	v
items	Grid.hx	/^          var items = Grid.getItemsInRect(environmentGridRef, gridX, gridY, cursorSize, cursorSize);$/;"	v
items	Grid.hx	/^    var items: GridItems = new Map();$/;"	v
keyPath	SaveState.hx	/^    var keyPath = 'test_game_state--${rand}.sav';$/;"	v
launchSoundPlayed	Game.hx	/^  var launchSoundPlayed = false;$/;"	v
level	Game.hx	/^  public var level = 15;$/;"	v
lifeTime	Game.hx	/^  var lifeTime = 5.0;$/;"	v
lifeTime	ParticlePlayground.hx	/^																					var lifeTime: Float;$/;"	v
lineOfSightCheck	Game.hx	/^    var lineOfSightCheck = (entity, x, y, i) -> {$/;"	v
lineWidth	Game.hx	/^        var lineWidth = isClearPath ? 0 : 2;$/;"	v
load	SaveState.hx	/^  public static function load($/;"	f
loadJsonFile	Utils.hx	/^  public static function loadJsonFile(res: hxd.res.Resource) {$/;"	f
loadMap	Asset.hx	/^  public static function loadMap(mapName, onLoad, onError) {$/;"	f
ls	SaveState.hx	/^        var ls = Browser.getLocalStorage();$/;"	v
ls	SaveState.hx	/^      var ls = Browser.getLocalStorage();$/;"	v
magnitude	Game.hx	/^    var magnitude = Math.sqrt(_dx * _dx + _dy * _dy);$/;"	v
magnitude	Game.hx	/^    var magnitude = Math.sqrt(dx * dx + dy * dy);$/;"	v
mapFile	Asset.hx	/^    var mapFile = '${mapName}.map';$/;"	v
mapRef	Game.hx	/^  var mapRef: GridRef;$/;"	v
max	Game.hx	/^      var max = 1;$/;"	v
maxDelta	Game.hx	/^      var maxDelta = 1;$/;"	v
min	Game.hx	/^            var min = pt.radius + ept.radius + separation;$/;"	v
min	Game.hx	/^        var min = radius + a.radius * 1.0;$/;"	v
mouseGridRef	Grid.hx	/^  var mouseGridRef: GridRef;$/;"	v
mouseX	Grid.hx	/^      var mouseX = Main.Global.rootScene.mouseX;$/;"	v
mouseY	Grid.hx	/^      var mouseY = Main.Global.rootScene.mouseY;$/;"	v
movePlayer	Game.hx	/^  function movePlayer() {$/;"	f
multiplier	Game.hx	/^              var multiplier = ept.forceMultiplier;$/;"	v
n1	Easing.hx	/^    var n1 = 7.5625;$/;"	v
nRange	Game.hx	/^        var nRange = 100;$/;"	v
neighbors	Game.hx	/^        var neighbors: Array<String> = [];$/;"	v
neighbors	Game.hx	/^  public var neighbors: Array<EntityId>;$/;"	v
new	Easing.hx	/^  public function new(s2d: h2d.Scene) {$/;"	f
new	Game.hx	/^  public function new($/;"	f
new	Game.hx	/^  public function new() {$/;"	f
new	Game.hx	/^  public function new(props, size, followTarget: Entity) {$/;"	f
new	Game.hx	/^  public function new(props: Point, customId = null) {$/;"	f
new	Game.hx	/^  public function new(x, y, s2d: h2d.Scene) {$/;"	f
new	Game.hx	/^  public function new(x1, y1, x2, y2, speed, sb) {$/;"	f
new	Grid.hx	/^  public function new(s2d: h2d.Scene) {$/;"	f
new	ParticlePlayground.hx	/^  public function new() {$/;"	f
newLevel	Game.hx	/^  public function newLevel(s2d: h2d.Scene) {$/;"	f
numKeys	Grid.hx	/^          var numKeys = 0;$/;"	v
num_iterations	Utils.hx	/^    var num_iterations = 0;$/;"	v
o	Game.hx	/^          var o = Entity.ALL_BY_ID.get(oid);$/;"	v
objectsToCleanup	Grid.hx	/^  var objectsToCleanup: Array<Dynamic> = [];$/;"	v
obstacleNeighbors	Game.hx	/^        var obstacleNeighbors = Grid.getItemsInRect($/;"	v
onError	SaveState.hx	/^        function onError(e) {$/;"	f
onReady	Grid.hx	/^    function onReady() {$/;"	f
onRemove	Game.hx	/^  override function onRemove() {$/;"	f
originPoint	Grid.hx	/^      var originPoint = new h2d.Graphics(s2d);$/;"	v
originalY	Easing.hx	/^  var originalY: Float;$/;"	v
p	ParticlePlayground.hx	/^        var p = particles[i];$/;"	v
p	ParticlePlayground.hx	/^      var p = projectileList[i];$/;"	v
pAlpha	ParticlePlayground.hx	/^    function pAlpha(p, progress: Float) {$/;"	f
pScale	ParticlePlayground.hx	/^    function pScale(p, progress: Float) {$/;"	f
pSystem	ParticlePlayground.hx	/^		var pSystem: PartSystem;$/;"	v
padding	Game.hx	/^            var padding = 10;$/;"	v
parent	Game.hx	/^  var parent: h2d.Object;$/;"	v
particle	Game.hx	/^		var particle: Particle;$/;"	v
particleConfig	ParticlePlayground.hx	/^						var particleConfig = { dx: 0.0,$/;"	v
particleConfig	ParticlePlayground.hx	/^            var particleConfig = {$/;"	v
particleConfig	ParticlePlayground.hx	/^          var particleConfig = {$/;"	v
particleSystemRef	Game.hx	/^		var particleSystemRef: ParticlePlayground;$/;"	v
particles	ParticlePlayground.hx	/^				var particles = s.particles;$/;"	v
path	Utils.hx	/^    var path = Std.string(res);$/;"	v
player	Game.hx	/^  var player: Player;$/;"	v
playerInfo	Game.hx	/^  public var playerInfo: h2d.Text;$/;"	v
playerInfo	Game.hx	/^  var playerInfo: h2d.Text;$/;"	v
playerSprite	Game.hx	/^  var playerSprite: h2d.Graphics;$/;"	v
posRange	Game.hx	/^    var posRange = 100;$/;"	v
pow	Easing.hx	/^  static var pow = Math.pow;$/;"	v
predicate	TestUtils.hx	/^    function predicate(passed) {$/;"	f
prevDist	Game.hx	/^    var prevDist = 999999.0;$/;"	v
previewInsertArea	Grid.hx	/^      function previewInsertArea(ev) {$/;"	f
progress	Easing.hx	/^    var progress = Easing.progress(startTime, time, duration);$/;"	v
progress	Easing.hx	/^  public static function progress(startTime: Float, currentTime: Float, duration: Float) {$/;"	f
progress	Game.hx	/^        var progress = Easing.progress(bounceAnimationStartTime, time, 1.0);$/;"	v
progress	ParticlePlayground.hx	/^          var progress = (aliveTime \/ p.lifeTime);$/;"	v
projectile	ParticlePlayground.hx	/^				var projectile: Particle = null;$/;"	v
projectileHitAlpha	ParticlePlayground.hx	/^    function projectileHitAlpha(p, progress: Float) {$/;"	f
projectileList	ParticlePlayground.hx	/^  var projectileList = [];$/;"	v
projectileSpeed	ParticlePlayground.hx	/^      var projectileSpeed = 1000;$/;"	v
pruneEmpty	Grid.hx	/^    var pruneEmpty = ref.pruneEmptyCell;$/;"	v
pruneEmptyCell	Grid.hx	/^  var pruneEmptyCell: Bool;$/;"	v
pt	Game.hx	/^            var pt = this;$/;"	v
queryX	Grid.hx	/^      var queryX = Math.round(width \/ 2);$/;"	v
queryY	Grid.hx	/^      var queryY = Math.round(height \/ 2);$/;"	v
radius	Game.hx	/^        var radius = Math.round(mapData.cellSize \/ 2);$/;"	v
radius	Game.hx	/^    var radius = 7 + size * 10;$/;"	v
radius	Game.hx	/^  public var radius: Int;$/;"	v
radius	Game.hx	/^  var radius: Int;$/;"	v
rand	SaveState.hx	/^    var rand = '${Math.random() * 1000}'.substring(4);$/;"	v
ref	Grid.hx	/^      var ref = Grid.create(1);$/;"	v
ref	Grid.hx	/^      var ref = Grid.create(cellSize);$/;"	v
remove	Grid.hx	/^  public function remove() {$/;"	f
removeItem	Grid.hx	/^  public static function removeItem(ref: GridRef, key: GridKey) {$/;"	f
removeSprite	ParticlePlayground.hx	/^		public function removeSprite(spriteRef: Particle) {$/;"	f
repelFilter	Game.hx	/^  var repelFilter: String;$/;"	v
rnd	Utils.hx	/^  public static function rnd(min:Float, max:Float, ?sign=false) {$/;"	f
rootScene	Game.hx	/^  var rootScene: h2d.Scene;$/;"	v
rootScene	ParticlePlayground.hx	/^          var rootScene = Main.Global.rootScene;$/;"	v
rootScene	ParticlePlayground.hx	/^    var rootScene = Main.Global.rootScene;$/;"	v
row	Grid.hx	/^    var row = ref.data[y];$/;"	v
s	SaveState.hx	/^      var s = File.getContent(fullPath);$/;"	v
s	SaveState.hx	/^      var s = ls.getItem(keyPath);$/;"	v
save	SaveState.hx	/^  public static function save($/;"	f
saveDir	SaveState.hx	/^  static var saveDir = 'external-assets';$/;"	v
sb	Game.hx	/^		var sb: ParticlePlayground;$/;"	v
scene	Grid.hx	/^  var scene: h2d.Scene;$/;"	v
screenX	Game.hx	/^        var screenX = x * cellSize;$/;"	v
screenY	Game.hx	/^        var screenY = y * cellSize;$/;"	v
separation	Game.hx	/^            var separation = 5 + Math.sqrt(speed \/ 2);$/;"	v
serialized	SaveState.hx	/^    var serialized = serializer.toString();$/;"	v
serializer	SaveState.hx	/^    var serializer = new Serializer();$/;"	v
set	Game.hx	/^  public function set(key, value) {$/;"	f
setEditMode	Grid.hx	/^        function setEditMode(ev: hxd.Event) {$/;"	f
setItemRect	Grid.hx	/^  public static function setItemRect($/;"	f
setNormalMode	Grid.hx	/^        function setNormalMode(ev: hxd.Event) {$/;"	f
setSize	Camera.hx	/^  public static function setSize(ref: CameraRef, w, h) {$/;"	f
setZoom	Grid.hx	/^        function setZoom(ev: hxd.Event) {$/;"	f
shouldContinue	Utils.hx	/^      var shouldContinue = callback(context, x1, y1, num_iterations);$/;"	v
shouldEmitParticle	ParticlePlayground.hx	/^    var shouldEmitParticle = !cds.has('emitParticle');$/;"	v
shouldFindNeighbors	Game.hx	/^      var shouldFindNeighbors = a.type == 'ENEMY'$/;"	v
sightRange	Game.hx	/^  public var sightRange = 400;$/;"	v
sign_x	Utils.hx	/^    var sign_x = (x1 < x2) ? 1 : -1;$/;"	v
sign_y	Utils.hx	/^    var sign_y = (y1 < y2) ? 1 : -1;$/;"	v
sin	Easing.hx	/^  static var sin = Math.sin;$/;"	v
size	Game.hx	/^    var size = Utils.irnd(1, 3);$/;"	v
size	Game.hx	/^  var size: Int;$/;"	v
snapPosition	Grid.hx	/^  public static function snapPosition(v: Dynamic, cellSize) {$/;"	f
soundResource	Game.hx	/^    var soundResource: hxd.res.Sound = null;$/;"	v
spawnDuration	Game.hx	/^  var spawnDuration: Float;$/;"	v
spawnInterval	Game.hx	/^  var spawnInterval = 0.05;$/;"	v
spawnProgress	Game.hx	/^    var spawnProgress = Math.min(1, time \/ spawnDuration);$/;"	v
speed	Game.hx	/^  public var speed = 0.0;$/;"	v
speed	ParticlePlayground.hx	/^																					var speed: Float;$/;"	v
speedAdjust	Game.hx	/^      var speedAdjust = Math.max(0,$/;"	v
speedBySize	Game.hx	/^  static var speedBySize = [$/;"	v
spriteCircleData	ParticlePlayground.hx	/^    var spriteCircleData = pSystem.spriteSheetData.circle_white;$/;"	v
spriteSheet	ParticlePlayground.hx	/^																							var spriteSheet: h2d.Tile;$/;"	v
spriteSheet	ParticlePlayground.hx	/^				var spriteSheet = hxd.Res.sprite_sheet_png.toTile();$/;"	v
spriteSheetData	ParticlePlayground.hx	/^																							var spriteSheetData: Dynamic;$/;"	v
spriteSquareData	ParticlePlayground.hx	/^    var spriteSquareData = pSystem.spriteSheetData.square_white;$/;"	v
spriteSquareWithGlowData	ParticlePlayground.hx	/^    var spriteSquareWithGlowData = pSystem.spriteSheetData.square_white_glow;$/;"	v
startAngle	ParticlePlayground.hx	/^          var startAngle = Math.atan2($/;"	v
startGridX	Game.hx	/^        var startGridX = Math.floor(a.x \/ cellSize);$/;"	v
startGridY	Game.hx	/^        var startGridY = Math.floor(a.y \/ cellSize);$/;"	v
startPos	Grid.hx	/^              var startPos = dragState.startObjectPosition;$/;"	v
startTime	Easing.hx	/^  var startTime: Float;$/;"	v
status	Game.hx	/^  public var status = 'TARGETABLE';$/;"	v
system	ParticlePlayground.hx	/^				var system: PartSystem = { particles: [],$/;"	v
target	Game.hx	/^  var target: Entity;$/;"	v
target	Game.hx	/^  var target: h2d.Object;$/;"	v
targetGridX	Game.hx	/^        var targetGridX = Math.floor(enemy.follow.x \/ cellSize);$/;"	v
targetGridY	Game.hx	/^        var targetGridY = Math.floor(enemy.follow.y \/ cellSize);$/;"	v
targetSprite	Game.hx	/^  var targetSprite: h2d.Graphics;$/;"	v
tests	Grid.hx	/^  public static function tests() {$/;"	f
tests	SaveState.hx	/^  public static function tests() {$/;"	f
text	Grid.hx	/^  var text: h2d.Text;$/;"	v
textCanvas	Grid.hx	/^    var textCanvas = new h2d.Graphics(s2d);$/;"	v
textTexture	Grid.hx	/^    var textTexture = new h3d.mat.Texture($/;"	v
textTile	Grid.hx	/^    var textTile = h2d.Tile.fromTexture(textTexture);$/;"	v
texture	Grid.hx	/^  var texture: h3d.mat.Texture;$/;"	v
threshold	Game.hx	/^      var threshold = follow.radius + 20;$/;"	v
tile	Grid.hx	/^    var tile = h2d.Tile.fromTexture(texture);$/;"	v
tile	ParticlePlayground.hx	/^  var tile: h2d.Tile;$/;"	v
tileWithGlow	ParticlePlayground.hx	/^  var tileWithGlow: h2d.Tile;$/;"	v
tiles	Grid.hx	/^      var tiles = [];$/;"	v
time	Easing.hx	/^  var time = 0.0;$/;"	v
time	Game.hx	/^  var time = 0.0;$/;"	v
time	ParticlePlayground.hx	/^																							var time: Float; };$/;"	v
time	ParticlePlayground.hx	/^				var time = s.time;$/;"	v
time	ParticlePlayground.hx	/^  var time = 0.0;$/;"	v
type	Game.hx	/^  public var type = 'UNKNOWN_TYPE';$/;"	v
type	Grid.hx	/^  var type: String;$/;"	v
uid	Utils.hx	/^  public static function uid($/;"	f
unserializer	SaveState.hx	/^          var unserializer = new Unserializer(data);$/;"	v
unserializer	SaveState.hx	/^      var unserializer = new Unserializer(s);$/;"	v
update	Camera.hx	/^  public static function update(ref: CameraRef, dt: Float) {$/;"	f
update	Easing.hx	/^  public function update(dt: Float) {$/;"	f
update	Game.hx	/^  public function update(dt: Float) {$/;"	f
update	Game.hx	/^  public function update(s2d: h2d.Scene, dt: Float) {$/;"	f
update	Game.hx	/^  public override function update(dt) {$/;"	f
update	Game.hx	/^  public override function update(dt: Float) {$/;"	f
update	Grid.hx	/^  public function update(dt: Float) {$/;"	f
update	ParticlePlayground.hx	/^  public function update(dt) {$/;"	f
update	ParticlePlayground.hx	/^  static public function update(s: PartSystem, dt: Float) {$/;"	f
updateGrids	Grid.hx	/^  var updateGrids: (ev: {relX: Float, relY: Float}) -> Void;$/;"	v
useAbility	Game.hx	/^  public function useAbility(x1: Float, y1: Float, ability: Int) {$/;"	f
v	Easing.hx	/^    var v = Easing.easeInQuint(progress);$/;"	v
w	Camera.hx	/^  var w: Int;$/;"	v
w	Game.hx	/^              var w = pt.weight \/ (pt.weight + ept.weight);$/;"	v
wallEnt	Game.hx	/^            var wallEnt = new Entity({$/;"	v
wallGraphic	Game.hx	/^            var wallGraphic = new h2d.Graphics(wallEnt);$/;"	v
wallId	Grid.hx	/^          var wallId = Utils.uid((id) -> {$/;"	v
waveVal	Game.hx	/^      var waveVal = hasSnakeMotion$/;"	v
weight	Game.hx	/^  public var weight = 1.0;$/;"	v
weight	Game.hx	/^  var weight: Float;$/;"	v
width	Grid.hx	/^      var width = 1;$/;"	v
width	Grid.hx	/^      var width = 2;$/;"	v
width	Grid.hx	/^      var width = cellSize - 1;$/;"	v
window	Utils.hx	/^    var window = Browser.window;$/;"	v
x	Camera.hx	/^  var x: Float;$/;"	v
x	Game.hx	/^  var x: Float;$/;"	v
x	ParticlePlayground.hx	/^																					var x: Float;$/;"	v
xMax	Grid.hx	/^    var xMax = Math.ceil(Math.round(x + (w \/ 2)) \/ ref.cellSize);$/;"	v
xMax	Grid.hx	/^    var xMax = cache[1];$/;"	v
xMin	Grid.hx	/^    var xMin = Math.floor(Math.round(x - (w \/ 2)) \/ ref.cellSize);$/;"	v
xMin	Grid.hx	/^    var xMin = cache[0];$/;"	v
y	Camera.hx	/^  var y: Float;$/;"	v
y	Game.hx	/^  var y: Float;$/;"	v
y	ParticlePlayground.hx	/^																					var y: Float;$/;"	v
yMax	Grid.hx	/^    var yMax = Math.ceil(Math.round(y + (h \/ 2)) \/ ref.cellSize);$/;"	v
yMax	Grid.hx	/^    var yMax = cache[3];$/;"	v
yMin	Grid.hx	/^    var yMin = Math.floor(Math.round(y - (h \/ 2)) \/ ref.cellSize);$/;"	v
yMin	Grid.hx	/^    var yMin = cache[2];$/;"	v
zoomBy	Grid.hx	/^          var zoomBy = 0.25;$/;"	v
zoomDelta	Grid.hx	/^          var zoomDelta = Math.round(ev.wheelDelta) * zoomBy;$/;"	v
